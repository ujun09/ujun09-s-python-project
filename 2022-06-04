##재귀, 기하
#
# #재귀
# #함수에서 자기 자신을 호출하는 방식
#
# def hello():
#     print('hello, world!')
#     hello()
#
# hello()
#
# #최대 재귀 깊이가 1000으로 정해져 있어
# #--> 종료 조건 필요
#
# def hello():
#     if count == 0:
#         return
#
#     print('Hello, world', count)
#
#     count -= 1
#     hello(count)
#
# hello(5)
#
# a = int(input())
# def factorial(n):
#     if n == 0:
#         b = n-1
#         print(n * factorial(b))
#     else:
#         n -= 1
#         return
# factorial(a)
# # 실패
#
# n = int(input())
# anw =1
# if n > 1:
#     for i in range(1,n+1):
#         anw *= i
# print(anw)
# # for 문
#
# def factorial(n):
#     anw = 1
#     if n > 0:
#         anw = n * factorial(n-1)
#         return anw
# n = int(input())
# print(factorial(a))
# 재귀함수
#
# n = int(input())
# def f(n):
#     return f(n-1) + f(n-2)
# f(n)
# # 함수(실패)
#
# n = int(input())
# fibonacci = [0,1]
# for i in range(2, n+1):
#     num = fibonacci[i-1] + fibonacci[i-2]
#     fibonacci.append(num)
# print(fibonacci[n])
# # for 문
# def fibonacci(n):
#     if n<=1:
#         return n
#     return fibonacci(n-1) + fibonacci(n-2)
#
# n = int(input())
# print(fibonacci())
# # 재귀함수
